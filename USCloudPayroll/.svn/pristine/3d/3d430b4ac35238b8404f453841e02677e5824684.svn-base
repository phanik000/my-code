package com.baseclass;

import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.Select;
import org.testng.ITestResult;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Parameters;

import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;
import com.utilities.ExcelUtil;
import com.utilities.ReadConfig;

import signin.pages.SignInPage;



/*Base class would be in the main class which will take care of 
 * Extent reports,Browser setup, loading configuration file and Excel File,
 * Taking Screenshots for Failed Test Cases and includes Signin Functionality
 */

public class BaseClass {
	public ReadConfig readconfig = new ReadConfig();
	public ExcelUtil excel=new ExcelUtil();
	public String baseurl = readconfig.getApplicationURL();
	public static WebDriver driver=null;;
	public SignInPage signin;

	public static String dest;
	public static String time;

	public static ExtentReports report;
	public static ExtentTest test;

	//It takes screenshot and stores file from source to destination with time include
	public static String takeScreenshot(WebDriver driver) {
		try {
			DateFormat dateFormat = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss");
			Date date = new Date();

			time = dateFormat.format(date);
			TakesScreenshot scrnshot = (TakesScreenshot) driver;
			File src = scrnshot.getScreenshotAs(OutputType.FILE);
			dest = System.getProperty("user.dir") + "\\Screenshots\\" + time + ".png";
			File destination = new File(dest);
			FileUtils.copyFile(src, destination);
			System.out.println("Screenshot taken");
		} catch (Exception e) {
			System.out.println("Screenshot error is :" + e.getMessage());
		}
		return dest;
	}
	//Geenerating extent Report with time and date format
	@BeforeTest
	public void reportSetup() {
		try {
			DateTimeFormatter timelapse = DateTimeFormatter.ofPattern("yyyy.MM.dd.HH.mm.ss");
			ZonedDateTime zone = ZonedDateTime.now();
			String reportTime = timelapse.format(zone);
			String repName = "Test-Report-" + reportTime + ".html";
			report = new ExtentReports(System.getProperty("user.dir") + "/ExtentReport/" + repName, true);
			report.addSystemInfo("HostName", "phani").addSystemInfo("Environment", "QA")
			.addSystemInfo("User", "Ambadas").addSystemInfo("Project Name", "Automation Demo");
			report.loadConfig(new File(System.getProperty("user.dir") + "\\extent-config.xml"));
		} catch (Exception e) {
			System.out.println("Report issue is :" + e.getMessage());
		}
	}
	//Getting report on Failure test cases
	@AfterMethod
	public void getReport(ITestResult result) {
		try {
			if (result.getStatus() == ITestResult.FAILURE)
			{

				test.log(LogStatus.FAIL, result.getThrowable());
				test.log(LogStatus.FAIL, "Below is the screen shot:-" + test.addScreenCapture(takeScreenshot(driver)));
				test.log(LogStatus.FAIL, "Test Case Fail is:- " + result.getName());

			} 
			else if (result.getStatus() == ITestResult.SUCCESS) 
			{
				test.log(LogStatus.PASS, "Test Case pass is:- " + result.getName());
			} 
			else if (result.getStatus() == ITestResult.SKIP) 
			{
				test.log(LogStatus.SKIP, "test Case skip is:- " + result.getName());
			} 
			else if (result.getStatus() == ITestResult.STARTED) 
			{
				test.log(LogStatus.INFO, "Test Case started");

			}
			report.endTest(test);
		} catch (Exception e) {

			System.out.println("Report generation exception is :" + e.getMessage());
		}

	}

	//End of a Extent Report generation
	@AfterTest
	public void endTest() {
		report.flush();
		report.close();
	}
	//It defines to launch browser and used to SignIn for application
	@Parameters({"browser","Email","Password"})
	@BeforeSuite
	public void baseSetup(String browser,String Email,String Password) {

		if (browser.equals("chrome")) {
			System.setProperty("webdriver.chrome.driver", readconfig.getChromePath());
			driver = new ChromeDriver();
		} else if (browser.equals("firefox")) {
			System.setProperty("webdriver.gecko.driver", readconfig.getFirefoxPath());
			driver = new FirefoxDriver();
		} else if (browser.equals("ie")) {
			System.setProperty("webdriver.ie.driver", readconfig.getIEPath());
			driver = new InternetExplorerDriver();
		}
		driver.get(baseurl);
		driver.manage().window().maximize();
		driver.manage().deleteAllCookies();
		try {
			signin = PageFactory.initElements(driver, SignInPage.class);
			signin.enterEmailID(Email);
			signin.enterPassword(Password);
			signin.clickSigninBtn();
		} catch (Exception e) {
			System.out.println("Test signin not executed msg is: " + e.getMessage());
		}
	}
	

	//tearing or closing the Driver
	@AfterSuite
	public void tearDown() throws Exception {
		driver.close();
	}

	//sysnchronization related to wait for an element
	public void iwait(int Seconds) {
		driver.manage().timeouts().implicitlyWait(Seconds, TimeUnit.SECONDS);
	}
	//Dropdown Select using select class
		public void dropdownSelect(WebElement element,String value) {
			Select s=new Select(element);
			s.selectByVisibleText(value);
		}
		
	public void loadFromList(WebElement ele) throws Exception {
		Select s = new Select(ele);
		s = new Select(ele);
		List<WebElement> l = s.getOptions();
		ele.sendKeys(Keys.CONTROL);

		for (WebElement e : l) {
			e.click();
		}
	}

	//Selecting every element from a select class by holding down control key
	public void selectFromList(String Xpath_of_select_class) {
		WebElement drop=driver.findElement(By.xpath(Xpath_of_select_class));
		Select sel= new Select(drop);
		List<WebElement> opts=sel.getOptions();
		Actions actions = new Actions(driver);
		actions.keyDown(Keys.LEFT_CONTROL).build().perform();
		for(WebElement option:opts) {
			option.click();
		}
		actions.keyUp(Keys.LEFT_CONTROL).build().perform();
	}



}
